SCOPING AND SCOPE IN JAVASCRIPT: CONCEPTS

SCOPE CONCEPTS
SCOPING: How our program's variables are organized and accessed
- "Where do variables live?" or 
- "Where can we access a certain variable, and where not?"

LEXICAL SCOPING: Scoping is controlled by placement of functions and 
blocks in the code. For example, code placed within another block of
code affects its scope (ie, a function within a function).

SCOPE: Space or environment in which a certain variable is 
declared (variable environment in case of functions). There is
global scope, function scope, and block scope.

SCOPE OF A VARIABLE: Region of our code where a certain variable
can be accessed.


THE 3 TYPES OF SCOPE 
GLOBAL SCOPE | FUNCTION SCOPE | BLOCK SCOPE (ES6)

Global Scope: 
- Outside of any function or block
- Variables declared in global scope are accessible everywhere

Function Scope:
- Variables are accessible only INSIDE function, not outside
- Also called local scope

Block Scope:
* by block we mean all code between curly braces, such as in an
if statement, for/while loop
** for example:
if (foo = bar) {
    const hello = 'Hi there';
    let name = 'Ryan';
}
- Variables are accessible only inside block (block scoped)
- HOWEVER, this only applies to let and const variables
*** var variables will be FUNCTION-scoped, even if within a block of code.
- Functions are also block scoped (only in strict mode)

THE SCOPE CHAIN
Variable Lookup in Scope Chain
- If a variable is referenced but not found declared in the local scope,
then it will be searched for in the parent scopes.

SCOPE CHAIN vs. CALL STACK
SCOPE CHAIN = the order in which functions are written in the code.
- It has nothing to do with order in which functions were called.